openapi: 3.0.0
info:
  title: Food For Fooodies
  description: A simple API to do CRUD on Cart, Payment, FoodItem, Order, Resturant, Review, User resource.

servers:
  - url: http://localhost:3000/

tags:
  - name: Cart
    description: API to manage the Cart details.
  



paths: 
  /fd/cart/:
    get:
      summary: List of cart Items.
      tags: [Cart]
      responses:
        "200":
          description: "Elements stored in Cart."
          content:
            application/json:
              schema:
                # $ref: '#/components/schemas/Cart'
    patch:
      summary: Update element in cart.
      tags: [Cart]
      responses: 
        "200":
          description: "Modify elements stored in Cart."
          content:
            application/json:
              schema:


    delete:
      summary: Remove the cart items that is not needed.
      tags: [Cart]
      responses: 
        "200":
          description: "Delete elements stored in Cart."
          content:
            application/json:
              schema:

  /fd/payment/order:
    post:
      summary: Finalize the order details.
      tags: [PaymentDetail]
      responses:
        "200":
          description: "Elements stored in Cart."
          content:
            application/json:
              schema:



  /fd/payment/verify:
    post:
      summary: Verifying the oder and payment. 
      tags: [PaymentDetail]
      responses: 
        "200":
          description: "Confirming if the payment was successful or not."
          content: 
            application/json:
              schema:


  /fd/users/signup:
    post:
      tags:
      - "user"
      summary: "Create user"
      description: "This can only be done by the logged in user."
      operationId: "createUser"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Created user object"
        required: true
        schema:
          # $ref: "#/definitions/User"
      responses:
        default:
          description: "successful operation"


  /fd/users/signin:
    get:
      tags:
      - "user"
      summary: "Logs user into the system"
      description: ""
      operationId: "loginUser"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "username"
        in: "query"
        description: "The user name for login"
        required: true
        type: "string"
      - name: "password"
        in: "query"
        description: "The password for login in clear text"
        required: true
        type: "string"
      responses:
        "200":
          description: "successful operation"
          schema:
            type: "string"
          headers:
            X-Rate-Limit:
              type: "integer"
              format: "int32"
              description: "calls per hour allowed by the user"
            X-Expires-After:
              type: "string"
              format: "date-time"
              description: "date in UTC when token expires"
        "400":
          description: "Invalid username/password supplied"

  /fd/users/signout:
    get:
      tags:
      - "user"
      summary: "Logs out current logged in user session"
      description: ""
      operationId: "logoutUser"
      produces:
      - "application/xml"
      - "application/json"
      parameters: []
      responses:
        default:
          description: "successful operation"
  
  /fd/users/:
    get:
      tags:
      - "user"
      summary: "Get all user who are active at the given time"
      description: ""
      operationId: "All User"


  /fd/users/deleteMe:
    delete:
      tags:
      - "user"
      summary: "Delete the specific user that is currently logged in."
      description: "The specific user can delete his/her account."
      operationId: "Delete User"          
      responses:
        default:
          description: "successful operation"


  /fd/users/updateMe:
    patch:
      tags:
      - "user"
      summary: "User can update his/her account based on their preferences like password update, profile update etc."
      description: "User can update thier account data like profile pic, username, email id, password etc."
      operationId: "User Update"          
      responses:
        default:
          description: "successful operation"

  /fd/restaurant:
    post:
      tags:
      - "Resturant"
      summary: "Add a new resturant and display all the previous resturant that belongs to that specific person."
      description: "This can be done by some user user who are registerd for adding thier resturant to our wensite and that form wil be reviewed by admin and then it is make sure whether that resturant will get added or not."
      operationId: "Add new Resturant."
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Created user object"
        required: true
        schema:
          # $ref: "#/definitions/Resturant"
      responses:
        default:
          description: "successful operation"
  /fd/restaurant/{id}:
    patch:
      tags:
      - "Resturant"
      summary: "Add a new resturant and display all the previous resturant that belongs to that specific person."
      description: "This can be done by some user user who are registerd for adding thier resturant to our wensite and that form wil be reviewed by admin and then it is make sure whether that resturant will get added or not."
      operationId: "Add new Resturant."
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Created user object"
        required: true
        schema:
          # $ref: "#/definitions/Resturant"
      responses:
        default:
          description: "successful operation"

  fd/restaurant/{id}:
    get:
      tags:
      - "Resturant"
      summary: "Find pet by ID"
      description: "Returns a single pet"
      operationId: "getPetById"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "petId"
        in: "path"
        description: "ID of pet to return"
        required: true
        type: "integer"
        format: "int64"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/Pet"
        "400":
          description: "Invalid ID supplied"
        "404":
          description: "Pet not found"
      security:
      - api_key: []


    post:
      tags:
      - "Resturant"
      summary: "Updates a pet in the store with form data"
      description: ""
      operationId: "updatePetWithForm"
      consumes:
      - "application/x-www-form-urlencoded"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "petId"
        in: "path"
        description: "ID of pet that needs to be updated"
        required: true
        type: "integer"
        format: "int64"
      - name: "name"
        in: "formData"
        description: "Updated name of the pet"
        required: false
        type: "string"
      - name: "status"
        in: "formData"
        description: "Updated status of the pet"
        required: false
        type: "string"
      responses:
        "405":
          description: "Invalid input"
      security:
      - petstore_auth:
        - "write:pets"
        - "read:pets"
    
    delete:
      tags:
      - "Resturant"
      summary: "Deletes a pet"
      description: ""
      operationId: "deletePet"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "api_key"
        in: "header"
        required: false
        type: "string"
      - name: "petId"
        in: "path"
        description: "Pet id to delete"
        required: true
        type: "integer"
        format: "int64"
      responses:
        "400":
          description: "Invalid ID supplied"
        "404":
          description: "Pet not found"



# components:
#   schemas:
#     Cart:
#       type: object
      